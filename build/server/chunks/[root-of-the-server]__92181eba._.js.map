{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateo/birdxlab/fe-clients-quironix/src/app/%28auth%29/sign-in/services/auth.service.ts"],"sourcesContent":["export const signIn = async (email: string, password: string) => {\n  try {\n    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/admin/auth/login`, {\n      method: \"POST\",\n      body: JSON.stringify({ email, password }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      const errorMessage = data.message || \"Error en la autenticación\";\n      throw new Error(errorMessage);\n    }\n\n    return data;\n  } catch (error) {\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error(\"Error desconocido al iniciar sesión\");\n  }\n};\n\nexport const getUserProfile = async (token: string) => {\n  const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/admin/users/profile`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  return response.json();\n};\n"],"names":[],"mappings":";;;;AAAO,MAAM,SAAS,OAAO,OAAe;IAC1C,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,EAAE;YAClF,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAO;YAAS;YACvC,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,eAAe,KAAK,OAAO,IAAI;YACrC,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAO;YAC1B,MAAM;QACR;QACA,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,MAAM,iBAAiB,OAAO;IACnC,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,EAAE;QACrF,QAAQ;QACR,SAAS;YACP,gBAAgB;YAChB,eAAe,CAAC,OAAO,EAAE,OAAO;QAClC;IACF;IAEA,OAAO,SAAS,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateo/birdxlab/fe-clients-quironix/src/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { CustomSessionInterface } from \"./types\";\nimport {\n  getUserProfile,\n  signIn as signInService,\n} from \"./app/(auth)/sign-in/services/auth.service\";\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    Credentials({\n      credentials: {\n        email: {},\n        password: {},\n      },\n      async authorize(credentials) {\n        try {\n          const response = await signInService(\n            credentials.email as string,\n            credentials.password as any\n          );\n\n          const userProfile = await getUserProfile(response.token);\n          const user = { ...userProfile, token: response.token };\n\n          if (!user) {\n            throw new Error(\"Credenciales inválidas\");\n          }\n\n          return user;\n        } catch (error: any) {\n          console.log(\"ERROR\", error);\n          throw new Error(error);\n        }\n      },\n    }),\n  ],\n  pages: {\n    signIn: \"/sign-in\",\n  },\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    authorized: async ({ auth }) => {\n      // Logged in users are authenticated, otherwise redirect to login page\n      // return !!auth;\n\n      return !!auth;\n    },\n    jwt({ token, user }: any) {\n      if (user) {\n        token.session = user;\n      }\n\n      return token;\n    },\n    session({ session, token }: any) {\n      session.token = token.session.token;\n      session.iat = token.iat;\n      session.exp = token.exp;\n      session.jti = token.jti;\n      session.user = {\n        id: token.session.id,\n        email: token.session.email,\n        name: token.session.name,\n        last_name: token.session.last_name,\n        type: token.session.type,\n        role: token.session.role,\n      };\n      return session;\n    },\n  },\n});\ndeclare module \"next-auth\" {\n  /**\n   * Returned by `auth`, `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context\n   */\n  // interface Session {\n  //   user: DefaultSession['user'] & CustomSessionInterface;\n  //   // user: CustomSessionInterface & DefaultSession['user'];\n  // }\n\n  interface Session extends CustomSessionInterface {}\n}\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAAA;AAEA;;;;AAKO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D,WAAW;QACT,CAAA,GAAA,4JAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa;gBACX,OAAO,CAAC;gBACR,UAAU,CAAC;YACb;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,MAAM,WAAW,MAAM,CAAA,GAAA,qKAAA,CAAA,SAAa,AAAD,EACjC,YAAY,KAAK,EACjB,YAAY,QAAQ;oBAGtB,MAAM,cAAc,MAAM,CAAA,GAAA,qKAAA,CAAA,iBAAc,AAAD,EAAE,SAAS,KAAK;oBACvD,MAAM,OAAO;wBAAE,GAAG,WAAW;wBAAE,OAAO,SAAS,KAAK;oBAAC;oBAErD,uCAAW;;oBAEX;oBAEA,OAAO;gBACT,EAAE,OAAO,OAAY;oBACnB,QAAQ,GAAG,CAAC,SAAS;oBACrB,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;KACD;IACD,OAAO;QACL,QAAQ;IACV;IACA,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,YAAY,OAAO,EAAE,IAAI,EAAE;YACzB,sEAAsE;YACtE,iBAAiB;YAEjB,OAAO,CAAC,CAAC;QACX;QACA,KAAI,EAAE,KAAK,EAAE,IAAI,EAAO;YACtB,IAAI,MAAM;gBACR,MAAM,OAAO,GAAG;YAClB;YAEA,OAAO;QACT;QACA,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAO;YAC7B,QAAQ,KAAK,GAAG,MAAM,OAAO,CAAC,KAAK;YACnC,QAAQ,GAAG,GAAG,MAAM,GAAG;YACvB,QAAQ,GAAG,GAAG,MAAM,GAAG;YACvB,QAAQ,GAAG,GAAG,MAAM,GAAG;YACvB,QAAQ,IAAI,GAAG;gBACb,IAAI,MAAM,OAAO,CAAC,EAAE;gBACpB,OAAO,MAAM,OAAO,CAAC,KAAK;gBAC1B,MAAM,MAAM,OAAO,CAAC,IAAI;gBACxB,WAAW,MAAM,OAAO,CAAC,SAAS;gBAClC,MAAM,MAAM,OAAO,CAAC,IAAI;gBACxB,MAAM,MAAM,OAAO,CAAC,IAAI;YAC1B;YACA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateo/birdxlab/fe-clients-quironix/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers } from \"@/auth\";\n\nexport const { GET, POST } = handlers;\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,6GAAA,CAAA,WAAQ","debugId":null}}]
}