/**
 * Script de prueba para verificar conectividad WebRTC
 *
 * C√≥mo usar:
 * 1. Abre la consola del navegador (F12)
 * 2. Copia y pega este script completo
 * 3. Presiona Enter
 * 4. Revisa los resultados en la consola
 */

(function testWebRTCConnection() {
  console.log("=".repeat(60));
  console.log("üß™ TEST DE CONEXI√ìN WEBRTC - ISSABEL PBX");
  console.log("=".repeat(60));

  const WS_URI = "wss://172.17.16.24:8089/ws";
  const SIP_DOMAIN = "172.17.16.24";

  console.log("\nüìã Configuraci√≥n:");
  console.log(`   WebSocket URI: ${WS_URI}`);
  console.log(`   SIP Domain: ${SIP_DOMAIN}`);

  // Test 1: Verificar soporte WebSocket
  console.log("\n1Ô∏è‚É£ Verificando soporte WebSocket...");
  if (typeof WebSocket === 'undefined') {
    console.error("‚ùå WebSocket no est√° soportado en este navegador");
    return;
  }
  console.log("‚úÖ WebSocket soportado");

  // Test 2: Intentar conectar al WebSocket
  console.log("\n2Ô∏è‚É£ Intentando conectar al WebSocket...");
  console.log(`   Conectando a: ${WS_URI}`);

  const ws = new WebSocket(WS_URI);

  const timeout = setTimeout(() => {
    if (ws.readyState !== WebSocket.OPEN) {
      console.error("‚ùå Timeout: No se pudo conectar al WebSocket en 10 segundos");
      console.error("   Posibles causas:");
      console.error("   - El servidor no est√° accesible");
      console.error("   - Problemas de firewall");
      console.error("   - Certificado SSL bloqueado");
      console.error("\n   üí° Soluci√≥n sugerida:");
      console.error("   1. Navega a https://172.17.16.24:8089");
      console.error("   2. Acepta el certificado SSL");
      console.error("   3. Vuelve a ejecutar este test");
      ws.close();
    }
  }, 10000);

  ws.onopen = (event) => {
    clearTimeout(timeout);
    console.log("‚úÖ WebSocket conectado exitosamente!");
    console.log("   ReadyState:", ws.readyState);
    console.log("   URL:", ws.url);
    console.log("   Protocol:", ws.protocol);

    console.log("\n3Ô∏è‚É£ Estado de la conexi√≥n:");
    console.log("   ‚úì Conexi√≥n establecida");
    console.log("   ‚úì Listo para enviar mensajes SIP");

    console.log("\n=".repeat(60));
    console.log("‚úÖ RESULTADO: Conexi√≥n WebRTC OK");
    console.log("=".repeat(60));
    console.log("\nüí° La conexi√≥n funciona correctamente.");
    console.log("   Si a√∫n tienes problemas, revisa:");
    console.log("   - Las credenciales SIP (usuario/contrase√±a)");
    console.log("   - Los logs de JsSIP en la consola");
    console.log("   - La pesta√±a Network ‚Üí WS para mensajes SIP");

    // Cerrar despu√©s de verificar
    setTimeout(() => {
      console.log("\nüîå Cerrando conexi√≥n de prueba...");
      ws.close();
    }, 2000);
  };

  ws.onerror = (error) => {
    clearTimeout(timeout);
    console.error("‚ùå Error al conectar WebSocket");
    console.error("   Error:", error);
    console.error("\n   Posibles causas:");
    console.error("   - Certificado SSL auto-firmado bloqueado");
    console.error("   - Servidor no accesible");
    console.error("   - Puerto 8089 bloqueado por firewall");
    console.error("\n   üí° Soluciones:");
    console.error("   1. Acepta el certificado SSL:");
    console.error("      ‚Üí https://172.17.16.24:8089");
    console.error("   2. Verifica conectividad:");
    console.error("      ‚Üí ping 172.17.16.24");
    console.error("   3. Verifica que el puerto est√© abierto:");
    console.error("      ‚Üí nc -zv 172.17.16.24 8089");
  };

  ws.onclose = (event) => {
    console.log("\nüîå WebSocket cerrado");
    console.log(`   Code: ${event.code}`);
    console.log(`   Reason: ${event.reason || 'Sin raz√≥n espec√≠fica'}`);
    console.log(`   Clean: ${event.wasClean ? 'S√≠' : 'No'}`);

    // Interpretar c√≥digo de cierre
    const closeCodes = {
      1000: "‚úÖ Cierre normal - Todo OK",
      1001: "‚ö†Ô∏è El servidor se fue",
      1006: "‚ùå Conexi√≥n cerrada anormalmente (sin handshake)",
      1015: "‚ùå Error de TLS/SSL - Certificado rechazado"
    };

    console.log(`   Interpretaci√≥n: ${closeCodes[event.code] || 'C√≥digo desconocido'}`);

    if (event.code === 1006) {
      console.error("\n   ‚ö†Ô∏è PROBLEMA DETECTADO: No se pudo establecer conexi√≥n");
      console.error("   El c√≥digo 1006 indica que el navegador rechaz√≥ la conexi√≥n");
      console.error("   antes de completar el handshake WebSocket.");
      console.error("\n   üí° SOLUCI√ìN:");
      console.error("   1. Abre en una nueva pesta√±a: https://172.17.16.24:8089");
      console.error("   2. Acepta el certificado SSL (clic en Avanzado ‚Üí Continuar)");
      console.error("   3. Vuelve aqu√≠ y ejecuta el test de nuevo");
    }

    if (event.code === 1015) {
      console.error("\n   ‚ö†Ô∏è PROBLEMA DETECTADO: Certificado SSL rechazado");
      console.error("   üí° SOLUCI√ìN: Acepta el certificado SSL del servidor");
    }
  };

  console.log("\n‚è≥ Esperando respuesta del servidor...");
  console.log("   (m√°ximo 10 segundos)");
})();
